[general]
;MONITOR_EXEC=/usr/share/asterisk/agi-bin/mix.php
static=yes
writeprotect=no
clearglobalvars=no


[play_f]
exten=> s,1,Wait(3)
same =>n,Noop("pay_f S  arg ${patch}")
;same =>n,Playback(${ARG1})
;same =>n,UserEvent("add_brige",star:1)
;same =>n,Noop("chanel id" ${chan_id})
;same =>n,MP3Player(${ARG1})
same =>n,UserEvent(kill_chan,chan: ${ARG1} )
same =>n,BridgeAdd(${ARG1})
same =>n,Return()



[play_f2]
exten=> s,1,Wait(3)
same =>n,Noop("pay_f S  arg ${patch}")
same =>n,Answer()
same =>n,Playback(${ARG1})
;same =>n,UserEvent("add_brige",star:1)
;same =>n,Noop("chanel id" ${chan_id})
;same =>n,MP3Player(${ARG1})
same =>n,UserEvent(kill_chan,chan: ${ARG2} )
same =>n,BridgeAdd(${ARG2})
same =>n,Return()


[sub-suf]
exten=>s,1,Wait(7)
same =>n,Noop("arg ${ARG1}")
same =>n,senddtmf(${ARG1})



[sip-p]
exten => _XXXXXX.,1,Noop(TEST ${CALLERID(num)} -->${EXTEN})
same => n,AGI(carousel_t.php)

;same => n,Dial(SIP/sip-p/${EXTEN},30,tTo,)
;same => n,Dial(SIP/${EXTEN}@158.160.44.52,tTo)
same => n ,hangup()
;include =>carousel
exten => 1001,1,NoOp()
 same => n,Stasis(channel-tones)
 same => n,Hangup()
exten => 1000,1,NoOp()
 same => n,Stasis(channel-playback-monkeys)
 same => n,Hangup()


[sub-set-handler]
exten => s,1,Set(CHANNEL(hangup_handler_push)=sub-rtcp-handler,s,1)
same  => n,Return()


[sub-rtcp-handler]
exten => s,1,NoOp(Start QoS ${CHANNEL(peername)} from  ${CALLERID(num)}--->${EXTEN})
same  => n,Set(TX_PLOS=${CHANNEL(rtpqos,audio,txploss)})
same  => n,Set(RX_PLOS=${CHANNEL(rtpqos,audio,rxploss)})
same  => n,Set(TX_COUNT=${CHANNEL(rtpqos,audio,txcount)})
same  => n,Set(RX_COUNT=${CHANNEL(rtpqos,audio,rxcount)})
same  => n,Set(TX_LOSS_PERC=$[${TX_PLOS}*100/${TX_COUNT}])
same  => n,Set(RX_LOSS_PERC=$[${RX_PLOS}*100/${RX_COUNT}])
same  => n,Noop(RX_LOSS_PERC: ${RX_LOSS_PERC}  TX_LOSS_PERC: ${TX_LOSS_PERC})


same =>    n,Set(local_ssrc=${CHANNEL(rtpqos,audio,local_ssrc)})
same =>    n,Set(remote_ssrc=${CHANNEL(rtpqos,audio,remote_ssrc)})
same =>    n,Set(txcount=${CHANNEL(rtpqos,audio,txcount)})
same =>    n,Set(rxcount=${CHANNEL(rtpqos,audio,rxcount)})
same =>    n,Set(local_maxrxploss=${CHANNEL(rtpqos,audio,local_maxrxploss)})
same =>    n,Set(local_minrxploss=${CHANNEL(rtpqos,audio,local_minrxploss)})
same =>    n,Set(rxploss=${CHANNEL(rtpqos,audio,rxploss)})
same =>    n,Set(local_normdevrxploss=${CHANNEL(rtpqos,audio,local_normdevrxploss)})
same =>    n,Set(local_stdevrxploss=${CHANNEL(rtpqos,audio,local_stdevrxploss)})
same =>    n,Set(txploss=${CHANNEL(rtpqos,audio,txploss)})
same =>    n,Set(remote_maxrxploss=${CHANNEL(rtpqos,audio,remote_maxrxploss)})
same =>    n,Set(remote_minrxploss=${CHANNEL(rtpqos,audio,remote_minrxploss)})
same =>    n,Set(remote_normdevrxploss=${CHANNEL(rtpqos,audio,remote_normdevrxploss)})
same =>    n,Set(remote_stdevrxploss=${CHANNEL(rtpqos,audio,remote_stdevrxploss)})
same =>    n,Set(rtt=${CHANNEL(rtpqos,audio,rtt)})
same =>    n,Set(maxrtt=${CHANNEL(rtpqos,audio,maxrtt)})
same =>    n,Set(minrtt=${CHANNEL(rtpqos,audio,minrtt)})
same =>    n,Set(normdevrtt=${CHANNEL(rtpqos,audio,normdevrtt)})
same =>    n,Set(stdevrtt=${CHANNEL(rtpqos,audio,stdevrtt)})
same =>    n,Set(rxjitter=${CHANNEL(rtpqos,audio,rxjitter)})
same =>    n,Set(txjitter=${CHANNEL(rtpqos,audio,txjitter)})
same =>    n,Set(local_maxjitter=${CHANNEL(rtpqos,audio,local_maxjitter)})
same =>    n,Set(local_minjitter=${CHANNEL(rtpqos,audio,local_minjitter)})
same =>    n,Set(local_normdevjitter=${CHANNEL(rtpqos,audio,local_normdevjitter)})
same =>    n,Set(local_stdevjitter=${CHANNEL(rtpqos,audio,local_stdevjitter)})
same =>    n,Set(remote_maxjitter=${CHANNEL(rtpqos,audio,remote_maxjitter)})
same =>    n,Set(remote_minjitter=${CHANNEL(rtpqos,audio,remote_minjitter)})
same =>    n,Set(remote_normdevjitter=${CHANNEL(rtpqos,audio,remote_normdevjitter)})
same =>    n,Set(remote_stdevjitter=${CHANNEL(rtpqos,audio,remote_stdevjitter)})




[carousel]
exten => _X.,1,Noop(LOCAL: ${CALLERID(num)}--->${EXTEN})
;same => n,Set(SIP_HEADER(from_ag)=${CALLERID(num)})
same => n, SipAddHeader(AgentN: ${EXTEN})
;same => n,AGI(recorder.php)
same => n,AGI(carousel_t.php)
same => n,hangup()

exten => h,1,Noop(hhhhhhhhhhhhhhhhhhhh)
same => n,AGI(dead.php)



[handler]

exten => s,1,NoOp()

same => n,Set(HANGUPCAUSE_STRING=${HANGUPCAUSE_KEYS()})

; start loop
same => n(hu_begin),NoOp()

; check exit condition (no more array to check)
same => n,GotoIf($[${LEN(${HANGUPCAUSE_STRING})}=0]?hu_exit)

; pull the next item
same => n,Set(ARRAY(item)=${HANGUPCAUSE_STRING})
same => n,Set(HANGUPCAUSE_STRING=${HANGUPCAUSE_STRING:${LEN(${item})}})

; display the channel name and cause codes
same => n,Verbose(0, Got Channel ID ${item} with Technology Cause Code ${HANGUPCAUSE(${item},tech)}, Asterisk Cause Code ${HANGUPCAUSE(${item},ast)})
same => n,UserEvent("h_code",cause:${HANGUPCAUSE} ,h_case:${CHANNEL(hangupsource)},sip_code:${HANGUPCAUSE(${item},tech)},sip_text:${HANGUPCAUSE(${item},ast)})
same => n,UserEvent("i_trunk",trunk:${CDR(trunk)},number_a:${CDR(number_a)})
; check exit condition (no more array to check)
same => n,GotoIf($[${LEN(${HANGUPCAUSE_STRING})}=0]?hu_exit)

; we still have entries to process, so strip the leading comma
same => n,Set(HANGUPCAUSE_STRING=${HANGUPCAUSE_STRING:1})

; go back to the beginning of the loop
same => n,Goto(hu_begin)

same => n(hu_exit),NoOp()
same => n,Return()

